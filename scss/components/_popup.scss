.popup {
    height: 100vh;
    width: 100%;
    position: fixed;
    top: 0;
    left: 0;
    background-color: rgba($color-black, .8);
    z-index: 3000;
    opacity: 0;
    visibility: hidden;
    transition: all .3s;

    // What we want to happen if this property is supported
    // And what we want to happen is the backgroun-color and etc.
    // And this we just implemented graceful degradation using the supports @ rule a feature query
    @supports (-webkit-backdrop-filter: blur(10px)) or (backdrop-filter: blur(10px)) {
        -webkit-backdrop-filter: blur(10px);
                backdrop-filter: blur(10px);
        background-color: rgba($color-black, .3);
    }

    &__content {
        width: 75%;
        background-color: $color-white;
        box-shadow: 0 2rem 4rem rgba($color-black, .2);
        @include center-horizontal-vertical;
        border-radius: $border-radius-md;
        display: table; // For same height
        overflow: hidden;
        opacity: 0;
        transform: translate(-50%, -50%) scale(.25);
        transition: all .5s .2s;
        
        /* Hide scrollbar for Chrome, Safari and Opera */
        &::-webkit-scrollbar {
            display: none;
        }

        @include respond(laptop) {
            display: grid;
            width: 70%;
            height: 90%;
            overflow: scroll;
        }

        @include respond(tab-port) {
            width: 85%;
        }

        @include respond(phone) {
            width: 90%;
        }
    }

    &__left {
        width: 33.333333%;
        display: table-cell; // For same height
        position: absolute;

        @include respond(laptop) {
            width: 100%;
            height: 30vh;
            display: grid;
            grid-template-columns: 1fr 1fr;
        }

        @include respond(tab-land) {
            height: 25vh;
        }

        @include respond(phone) {
            display: none;
        }
    }

    &__right {
        background-color: $color-white;
        width: 66.6666667%;
        display: table-cell; // For same height
        vertical-align: middle; // Contents will aligned in the middle
        padding: 3rem 5rem;

        @include respond(laptop) {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            width: 100%;
            margin: 30rem 0 5rem 0;
        }

        @include respond(tab-land) {
            margin-top: 28rem;
        }

        @include respond(phone) {
            padding: 5rem 2.5rem;
            text-align: center;
            margin-top: 0;
            margin-bottom: 0;
        }
    }

    &__img {
        display: block;
        width: 100%;
        height: 100%;
    }

    &__text {
        font-size: 1.4rem; // Current font-size in the element
        margin-bottom: 4rem;

        column-count: 2;
        column-gap: 4rem; // The default column gap 1em = 14px; Because 1em is always the font-size of the current element which is 1.4rem
        column-rule: 1px solid $color-grey-light-2; // Put border in the middle of the columns

        -webkit-hyphens: auto; // 30/04/2022 https://developer.mozilla.org/en-US/docs/Web/CSS/hyphens#browser_compatibility
            -ms-hyphens: auto; // 30/04/2022
                hyphens: auto; // Automatically figured out where to place the hyphens

        @include respond(phone) {
            column-count: 1;
        }
    }

    // Open states
    &:target {
        opacity: 1;
        visibility: visible;
    }

    // When the popup becomes the target,
    // then we style the child element of the popup
    &:target &__content {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1);
    }

    // What this closing button will do is to remove the target from the popup
    // So it's simply the popup styles will gone
    &__close {
        &:link,
        &:visited { 
            color: $color-grey-dark;
            position: absolute;
            top: 2.5rem;
            right: 2.5rem;
            font-size: 3rem;
            text-decoration: none;
            display: inline-block;
            transition: all .2s;
            line-height: 1;
        }

        &:hover {
            color: $color-primary;
        }
    }
}